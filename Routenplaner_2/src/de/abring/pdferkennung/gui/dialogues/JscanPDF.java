/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.abring.pdferkennung.gui.dialogues;

import de.abring.pdferkennung.PictureRecognition;
import de.abring.pdferkennung.gui.JPictureFrame;
import de.abring.pdferkennung.gui.dialogues.FileIO;
import de.abring.routenplaner.gui.Route;
import de.abring.routenplaner.gui.imageOCR.OCR;
import de.abring.routenplaner.jxtreetableroute.entries.JXTreeRouteAddressClient;
import de.abring.routenplaner.jxtreetableroute.entries.JXTreeRouteAddressFav;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;

/**
 *
 * @author Karima
 */
public class JscanPDF extends javax.swing.JDialog {

    private final Route route;

    private JXTreeRouteAddressFav fav;
    
    private PDFRenderer renderer ;
    private int pages = 0;
    private int resolution = 250;
    
    
    /**
     * Creates new form JscanPDF
     * @param parent
     * @param modal
     * @param route
     * @param fav
     */
    public JscanPDF(java.awt.Frame parent, boolean modal, Route route, JXTreeRouteAddressFav fav) {
        super(parent, modal);
        initComponents();
        this.route = route;
        this.fav = fav;
        loadFile(FileIO.getOpenPDFFile(parent, System.getProperty("user.home")));
    }

    private void loadFile(File file) {
        try {
            PDDocument doc = PDDocument.load(file);
            renderer = new PDFRenderer(doc);
            pages = doc.getNumberOfPages();
            for(int i = 0; i < pages; i++) {
                showPage(i);
            }
        } catch (IOException ex) {
            Logger.getLogger(JPictureFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }
    
    private void showPage(int page) {
        BufferedImage image = null;
        try {
            image = renderer.renderImageWithDPI(page, resolution, ImageType.RGB);
        } catch (IOException ex) {
            Logger.getLogger(JPictureFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        image = PictureRecognition.frameFinder(image, 1, Math.round(resolution / 30.0f));
        if (image != null) {

            JXTreeRouteAddressClient entry = OCR.rollkarteOCR(null, true, fav, image);
            if (entry != null)
                route.addEntry(route.listLength() - 2, entry);
        }
    }
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 772, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 172, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
