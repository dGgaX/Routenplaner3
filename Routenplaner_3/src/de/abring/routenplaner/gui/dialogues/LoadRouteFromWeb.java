/*
 * Here comes the text of your license
 * Each line should be prefixed with  * 
 */
package de.abring.routenplaner.gui.dialogues;

import de.abring.helfer.webIO.exception.URLEmptyDataException;
import de.abring.helfer.webIO.exception.URLRequestExpiredException;
import de.abring.routenplaner.jxtreetableroute.entries.JXTreeRouteTour;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.Authenticator;
import java.net.PasswordAuthentication;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author Karima
 */
public class LoadRouteFromWeb extends javax.swing.JDialog {

    private final List<JXTreeRouteTour> tourList;
    /**
     * Creates new form loadRouteFromWeb
     * @param parent
     * @param modal
     */
    public LoadRouteFromWeb(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        tourList = new ArrayList<>();
        this.jDteDate.setDate(new Date());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDteDate = new org.jdesktop.swingx.JXDatePicker();
        jBtnOk = new javax.swing.JButton();
        jBtnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Choose Date");

        jBtnOk.setText("OK");
        jBtnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnOkActionPerformed(evt);
            }
        });

        jBtnCancel.setText("Cancel");
        jBtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jDteDate, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBtnCancel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnOk)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jDteDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnOk)
                    .addComponent(jBtnCancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnOkActionPerformed
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        
        String result;
        try {
            
            result = getData("http://firma.lc24.eu/alfawin/HRShow.php?password=abrakadabra&date=" +
                             URLEncoder.encode(format.format(this.jDteDate.getDate()), "UTF-8"));   //No-API-Key
            String temp = "[ " + result.substring(2, result.length() - 2) + " ]";
            System.out.println(temp);
            
            
            
            
            
            //?????????????????????????????????????
            
            
            
            
            
            JSONArray array = new JSONArray(temp);

            for (int i = 0 ; i < array.length(); i++) {
                JSONObject object = array.getJSONObject(i);
                
                JXTreeRouteTour tour = new JXTreeRouteTour(object.getString("Name"), object.getString("Driver"), object.getString("Co"), object.getString("Car"), object.getString("Info"));
                tourList.add(tour);
            
            }
            
        } catch (IOException | URLRequestExpiredException | URLEmptyDataException ex) {
            Logger.getLogger(LoadRouteFromWeb.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        this.dispose();
    }//GEN-LAST:event_jBtnOkActionPerformed

    private void jBtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCancelActionPerformed
        tourList.clear();
        this.dispose();
    }//GEN-LAST:event_jBtnCancelActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnCancel;
    private javax.swing.JButton jBtnOk;
    private org.jdesktop.swingx.JXDatePicker jDteDate;
    // End of variables declaration//GEN-END:variables

    
    /**
     * 
     * @param url
     * @return
     * @throws IOException
     * @throws URLRequestExpiredException
     * @throws URLEmptyDataException 
     */
    private static String getData (String url) throws IOException, URLRequestExpiredException, URLEmptyDataException {
        String result = "";
        Authenticator.setDefault (new Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication ("Bring", "Kh75ct!!!".toCharArray());
            }
        });
        URL myURL= new URL(url);
        URLConnection hc = myURL.openConnection();
        hc.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; de; de-DE; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36");

        try (Reader is = new InputStreamReader( hc.getInputStream() ); BufferedReader in = new BufferedReader( is )) {
            final Thread counter = new Thread(
                () -> {
                    boolean run = true;
                    int sec = 0;
                    while(run) {
                        try {
                            Thread.sleep(1000);
                            sec++;
                            if (sec > 5) {
                                run = false;
                                is.close();
                            }
                        } catch (IOException | InterruptedException e) {
                            run = false;
                        }
                    }
                }
            );
            counter.start();
            
            for ( String line; ( line = in.readLine() ) != null; ) {
                result += line;
            }
            
            if (!counter.isAlive())
                throw new URLRequestExpiredException(url);
            else 
                counter.interrupt();


        }

        if (result.isEmpty())
            throw new URLEmptyDataException(url);
        return result;
    }
    /**
     * @return the routeList
     */
    public List<JXTreeRouteTour> getTourList() {
        return tourList;
    }
}
