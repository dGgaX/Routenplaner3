/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.bring.tsp;

import de.bring.helfer.*;
import de.bring.treeTableRoute.entries.*;
import de.bring.tsp.container.*;
import java.awt.Color;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ListSelectionModel;
import javax.swing.SwingWorker;
import de.bring.helfer.gui.GetAddress;
import de.bring.helfer.gui.LookupAddress;

/**
 * programming the traveling SalesmanProblem by using OSM-based JMapView
 *
 * @author Bring
 */
public class TSP extends javax.swing.JFrame {

    TSP that = this;
    Color mapPointColor = Color.WHITE;
    Color mapPointHighlightColor = new Color(152, 0, 0);
    int selectionMode = ListSelectionModel.MULTIPLE_INTERVAL_SELECTION;
    List<TreeAddressContainer> allAddressKnots = new ArrayList<>();
    List<TreeRouteContainer> minimalTree = new ArrayList<>();

    /**
     * Creates new form TSP
     */
    public TSP() {
        initComponents();
        initOtherComponents();
    }

    private void initOtherComponents() {
        this.jXTreeTableRoute.setComponentPopupMenu(this.jPopupMenu);
        this.jXTreeTableRoute.addEntry(new TreeStart(new Uhrzeit("09:00")));
        this.jXTreeTableRoute.addEntry(new TreeEnd());
        this.jXTreeTableRoute.refreshTable();
        this.jXTreeTableRoute.updateUI();

        workerTSP.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                jXTreeTableRoute.refreshTable();
                jXTreeTableRoute.updateUI();
                jMapViewer.setDisplayToFitMapMarkers();
                jMapViewer.repaint();
                jMapViewer.updateUI();
            }
        });
        workerTrack.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                jXTreeTableRoute.refreshTable();
                jXTreeTableRoute.updateUI();
                jMapViewer.setDisplayToFitMapMarkers();
                jMapViewer.repaint();
                jMapViewer.updateUI();
            }
        });
        workerAddTestAddresses.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                jXTreeTableRoute.refreshTable();
                jXTreeTableRoute.updateUI();
                jMapViewer.setDisplayToFitMapMarkers();
                jMapViewer.repaint();
                jMapViewer.updateUI();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu = new javax.swing.JPopupMenu();
        jMenuItemAddEntry = new javax.swing.JMenuItem();
        jMenuItemRemoveEntry = new javax.swing.JMenuItem();
        jToolBarItemGetAllRoutes = new javax.swing.JButton();
        jToolBarItemMinimalTree = new javax.swing.JButton();
        jToolBarItemMaxRoute = new javax.swing.JButton();
        jPanelStatus = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jSplitPane = new javax.swing.JSplitPane();
        jMapViewer = new org.openstreetmap.gui.jmapviewer.JMapViewer();
        jScrollPane1 = new javax.swing.JScrollPane();
        jXTreeTableRoute = new de.bring.treeTableRoute.gui.JXTreeTableRouteShort();
        jToolBar1 = new javax.swing.JToolBar();
        jToolBarItemAddEntry = new javax.swing.JButton();
        jToolBarItemRemoveEntry = new javax.swing.JButton();
        jToolBarSeparator1 = new javax.swing.JToolBar.Separator();
        jToolBarItemResetMap = new javax.swing.JButton();
        jToolBarSeparator2 = new javax.swing.JToolBar.Separator();
        jToolBarSeparator3 = new javax.swing.JToolBar.Separator();
        jToolBarItemAllInOne = new javax.swing.JButton();
        jToolBarItemTrack = new javax.swing.JButton();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuDatei = new javax.swing.JMenu();
        jMenuItemBeenden = new javax.swing.JMenuItem();

        jMenuItemAddEntry.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/bring/helfer/images/20/iconhaken.png"))); // NOI18N
        jMenuItemAddEntry.setText("Neuer Eintrag");
        jMenuItemAddEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAddEntryActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemAddEntry);

        jMenuItemRemoveEntry.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/bring/helfer/images/20/iconcross.png"))); // NOI18N
        jMenuItemRemoveEntry.setText("Eintrag entfernen");
        jMenuItemRemoveEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRemoveEntryActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemRemoveEntry);

        jToolBarItemGetAllRoutes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/bring/helfer/images/20/iconsmilered.png"))); // NOI18N
        jToolBarItemGetAllRoutes.setText("GetAllRoutes");
        jToolBarItemGetAllRoutes.setEnabled(false);
        jToolBarItemGetAllRoutes.setFocusable(false);
        jToolBarItemGetAllRoutes.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jToolBarItemGetAllRoutes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToolBarItemGetAllRoutesActionPerformed(evt);
            }
        });

        jToolBarItemMinimalTree.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/bring/helfer/images/20/iconsmileyellow.png"))); // NOI18N
        jToolBarItemMinimalTree.setText("MinimalTree");
        jToolBarItemMinimalTree.setEnabled(false);
        jToolBarItemMinimalTree.setFocusable(false);
        jToolBarItemMinimalTree.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jToolBarItemMinimalTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToolBarItemMinimalTreeActionPerformed(evt);
            }
        });

        jToolBarItemMaxRoute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/bring/helfer/images/20/iconsmilegreen.png"))); // NOI18N
        jToolBarItemMaxRoute.setText("BesteRoute");
        jToolBarItemMaxRoute.setEnabled(false);
        jToolBarItemMaxRoute.setFocusable(false);
        jToolBarItemMaxRoute.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jToolBarItemMaxRoute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToolBarItemMaxRouteActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TravelingSalesmanProblem");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanelStatus.setMinimumSize(new java.awt.Dimension(0, 21));

        jProgressBar1.setPreferredSize(new java.awt.Dimension(146, 16));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel1.setText("Insert Addresses");

        javax.swing.GroupLayout jPanelStatusLayout = new javax.swing.GroupLayout(jPanelStatus);
        jPanelStatus.setLayout(jPanelStatusLayout);
        jPanelStatusLayout.setHorizontalGroup(
            jPanelStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelStatusLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelStatusLayout.setVerticalGroup(
            jPanelStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelStatusLayout.createSequentialGroup()
                .addGroup(jPanelStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addGroup(jPanelStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jSeparator1)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(0, 5, Short.MAX_VALUE))
        );

        jSplitPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSplitPane.setDividerLocation(500);
        jSplitPane.setRightComponent(jMapViewer);

        jXTreeTableRoute.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jXTreeTableRouteValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jXTreeTableRoute);

        jSplitPane.setLeftComponent(jScrollPane1);

        jToolBar1.setRollover(true);

        jToolBarItemAddEntry.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/bring/helfer/images/20/iconhaken.png"))); // NOI18N
        jToolBarItemAddEntry.setFocusable(false);
        jToolBarItemAddEntry.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToolBarItemAddEntry.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBarItemAddEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToolBarItemAddEntryActionPerformed(evt);
            }
        });
        jToolBar1.add(jToolBarItemAddEntry);

        jToolBarItemRemoveEntry.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/bring/helfer/images/20/iconcross.png"))); // NOI18N
        jToolBarItemRemoveEntry.setFocusable(false);
        jToolBarItemRemoveEntry.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToolBarItemRemoveEntry.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBarItemRemoveEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToolBarItemRemoveEntryActionPerformed(evt);
            }
        });
        jToolBar1.add(jToolBarItemRemoveEntry);
        jToolBar1.add(jToolBarSeparator1);

        jToolBarItemResetMap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/bring/helfer/images/20/iconOSM.png"))); // NOI18N
        jToolBarItemResetMap.setFocusable(false);
        jToolBarItemResetMap.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToolBarItemResetMap.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBarItemResetMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToolBarItemResetMapActionPerformed(evt);
            }
        });
        jToolBar1.add(jToolBarItemResetMap);
        jToolBar1.add(jToolBarSeparator2);
        jToolBar1.add(jToolBarSeparator3);

        jToolBarItemAllInOne.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/bring/helfer/images/20/iconright.png"))); // NOI18N
        jToolBarItemAllInOne.setText("AllInOneTSP");
        jToolBarItemAllInOne.setFocusable(false);
        jToolBarItemAllInOne.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jToolBarItemAllInOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToolBarItemAllInOneActionPerformed(evt);
            }
        });
        jToolBar1.add(jToolBarItemAllInOne);

        jToolBarItemTrack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/bring/helfer/images/20/iconright.png"))); // NOI18N
        jToolBarItemTrack.setText("Track");
        jToolBarItemTrack.setFocusable(false);
        jToolBarItemTrack.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jToolBarItemTrack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToolBarItemTrackActionPerformed(evt);
            }
        });
        jToolBar1.add(jToolBarItemTrack);

        jMenuDatei.setText("Datei");

        jMenuItemBeenden.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemBeenden.setText("Beenden");
        jMenuItemBeenden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBeendenActionPerformed(evt);
            }
        });
        jMenuDatei.add(jMenuItemBeenden);

        jMenuBar.add(jMenuDatei);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1285, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 709, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemBeendenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBeendenActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItemBeendenActionPerformed

    private void jMenuItemRemoveEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRemoveEntryActionPerformed
        TreeEntry entry = this.jXTreeTableRoute.getEntryAt(this.jXTreeTableRoute.getSelectedRow());
        if (entry instanceof TreeAddress) {
            TreeAddress address = (TreeAddress) entry;
            address.getDot().setColor(mapPointHighlightColor);
            this.jMapViewer.deleteMapMarker(address.getDot());
            this.jXTreeTableRoute.removeEntry(address);

            this.jXTreeTableRoute.refreshTable();
            this.jXTreeTableRoute.updateUI();
            this.jMapViewer.setDisplayToFitMapMarkers();
        }
    }//GEN-LAST:event_jMenuItemRemoveEntryActionPerformed

    private void jMenuItemAddEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddEntryActionPerformed
        GetAddress newAddress = new GetAddress(this, true);
        newAddress.setVisible(true);
        if (newAddress.getMapAddress() != null) {
            if (this.jXTreeTableRoute.getEntryList().size() >= 1) {
                TreeAddress newTreeAddress = new TreeAddress(null, new Uhrzeit(""), new Uhrzeit("00:25"), "", newAddress.getMapAddress(), new Euro(""));
                this.jXTreeTableRoute.addEntry(this.jXTreeTableRoute.getEntryList().size() - 1, newTreeAddress);
                newTreeAddress.getDot().setColor(mapPointColor);
                this.jMapViewer.addMapMarker(newTreeAddress.getDot());

                this.jXTreeTableRoute.refreshTable();
                this.jXTreeTableRoute.updateUI();
            }
        }
    }//GEN-LAST:event_jMenuItemAddEntryActionPerformed

    private void jToolBarItemAddEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToolBarItemAddEntryActionPerformed
        jMenuItemAddEntryActionPerformed(evt);
    }//GEN-LAST:event_jToolBarItemAddEntryActionPerformed

    private void jToolBarItemRemoveEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToolBarItemRemoveEntryActionPerformed
        jMenuItemRemoveEntryActionPerformed(evt);
    }//GEN-LAST:event_jToolBarItemRemoveEntryActionPerformed

    private void jToolBarItemResetMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToolBarItemResetMapActionPerformed
        this.jMapViewer.setDisplayToFitMapMarkers();
    }//GEN-LAST:event_jToolBarItemResetMapActionPerformed

    private void jToolBarItemGetAllRoutesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToolBarItemGetAllRoutesActionPerformed
        /**
         * Alle Adressen in neue Struktur einfügen
         */
        for (TreeEntry entry : this.jXTreeTableRoute.getEntryList()) {
            if (entry instanceof TreeAddress) {
                TreeAddress address = (TreeAddress) entry;
                TreeAddressContainer container = new TreeAddressContainer(address);
                allAddressKnots.add(container);
                for (TreeEntry entry2 : this.jXTreeTableRoute.getEntryList()) {
                    if (entry2 instanceof TreeAddress) {
                        TreeAddress address2 = (TreeAddress) entry2;
                        if (!address.equals(address2)) {
                            TreeRoute route = new TreeRoute(address.getAddress(), address2.getAddress());
                            container.addChildRoute(new TreeRouteContainer(route, container, null));
                        }
                    }
                }
            }
        }
        for (TreeAddressContainer container1 : allAddressKnots) {
            for (TreeRouteContainer route1 : container1.getChildRouten()) {
                Container2:
                for (TreeAddressContainer container2 : allAddressKnots) {
                    for (TreeRouteContainer route2 : container2.getChildRouten()) {
                        if (route1.route.getEndAddress().equals(route2.route.getStartAddress()) && route2.route.getEndAddress().equals(route1.route.getStartAddress())) {
                            route1.ende = container2;
                            break Container2;
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_jToolBarItemGetAllRoutesActionPerformed

    private void jToolBarItemMinimalTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToolBarItemMinimalTreeActionPerformed
        boolean allAreConnected = false;
        allAddressKnots.get(0).isConnected = true;
        while (!allAreConnected) {
            TreeRouteContainer minimalRoute = new TreeRouteContainer(new TreeRoute(new Address(0, 0), new Address(0, 180)), null, null);
            for (TreeAddressContainer container : allAddressKnots) {
                if (container.isConnected) {
                    for (TreeRouteContainer route : container.getChildRouten()) {
                        if (route.start.isConnected && route.ende.isConnected) {
                        } else {
                            if (route.route.getRoute().getLänge() < minimalRoute.route.getRoute().getLänge()) {
                                minimalRoute = route;
                            }
                        }

                    }
                }
            }
            minimalRoute.start.addChild(minimalRoute.ende);
            minimalRoute.ende.isConnected = true;
            minimalTree.add(minimalRoute);
            allAreConnected = true;
            for (TreeAddressContainer container : allAddressKnots) {
                if (!container.isConnected) {
                    allAreConnected = false;
                }
            }
        }
    }//GEN-LAST:event_jToolBarItemMinimalTreeActionPerformed

    private void jToolBarItemMaxRouteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToolBarItemMaxRouteActionPerformed
        List<TreeRouteContainer> maxRouten = allAddressKnots.get(0).getMaxRouten();
        for (TreeRouteContainer route : maxRouten) {
            route.route.calcRoute();
            route.route.getLine().setColor(Color.BLUE);
            this.jMapViewer.addMapLines(route.route.getLine());
        }
        this.jMapViewer.repaint();
        this.jMapViewer.updateUI();

        for (int i = 0; i < maxRouten.size() - 1; i++) {
            TreeRouteContainer routeAB = maxRouten.get(i);
            TreeRouteContainer routeBC = maxRouten.get(i + 1);

            this.jMapViewer.repaint();
            this.jMapViewer.updateUI();
            if (routeAB.ende.anzahlKanten > 2) {
                TreeRouteContainer routeAC = new TreeRouteContainer(new TreeRoute(routeAB.start.getMe().getAddress(), routeBC.ende.getMe().getAddress()), routeAB.start, routeBC.ende);
                routeAC.route.calcRoute();
                if ((routeAB.route.getDauer().getMillis() + routeBC.route.getDauer().getMillis()) < routeAC.route.getDauer().getMillis()) {
                    maxRouten.add(i, routeAC);
                    routeAC.route.getLine().setColor(Color.BLUE);
                    this.jMapViewer.addMapLines(routeAC.route.getLine());

                    routeAB.ende.anzahlKanten -= 2;

                    this.jMapViewer.deleteMapLines(routeAB.route.getLine());
                    this.jMapViewer.deleteMapLines(routeBC.route.getLine());
                    maxRouten.remove(routeAB);
                    maxRouten.remove(routeBC);
                    //--i;
                }
            }

        }

        this.jMapViewer.repaint();
        this.jMapViewer.updateUI();

        for (TreeRouteContainer route : maxRouten) {
            this.jXTreeTableRoute.removeEntry(route.start.getMe());
            this.jXTreeTableRoute.addEntry(1, route.start.getMe());
            this.jXTreeTableRoute.addEntry(1, route.route);
        }
        this.jXTreeTableRoute.removeEntry(maxRouten.get(maxRouten.size() - 1).ende.getMe());
        this.jXTreeTableRoute.addEntry(1, maxRouten.get(maxRouten.size() - 1).ende.getMe());

        this.jXTreeTableRoute.refreshTable();
        this.jXTreeTableRoute.updateUI();

    }//GEN-LAST:event_jToolBarItemMaxRouteActionPerformed

    private void jToolBarItemAllInOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToolBarItemAllInOneActionPerformed

        workerTSP.execute();

    }//GEN-LAST:event_jToolBarItemAllInOneActionPerformed

    private void jToolBarItemTrackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToolBarItemTrackActionPerformed

        workerTrack.execute();

    }//GEN-LAST:event_jToolBarItemTrackActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        workerAddTestAddresses.execute();

    }//GEN-LAST:event_formWindowOpened

    private void jXTreeTableRouteValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jXTreeTableRouteValueChanged
        for (TreeEntry entry : this.jXTreeTableRoute.getEntryList()) {
            if (entry instanceof TreeAddress) {
                TreeAddress address = (TreeAddress) entry;
                address.getDot().setColor(mapPointColor);
            }
            if (entry instanceof TreeRoute) {
                TreeRoute route = (TreeRoute) entry;
                route.getLine().setColor(mapPointColor);
            }
        }
        TreeEntry entry = this.jXTreeTableRoute.getEntryAt(this.jXTreeTableRoute.getSelectedRow());
        if (entry instanceof TreeAddress) {
            TreeAddress address = (TreeAddress) entry;
            address.getDot().setColor(mapPointHighlightColor);
        }
        if (entry instanceof TreeRoute) {
            TreeRoute route = (TreeRoute) entry;
            route.getLine().setColor(mapPointHighlightColor);
        }
        this.jMapViewer.repaint();
        this.jMapViewer.updateUI();        // TODO add your handling code here:
    }//GEN-LAST:event_jXTreeTableRouteValueChanged

    SwingWorker<Void, Void> workerTSP = new SwingWorker<Void, Void>() {
        @Override
        protected Void doInBackground() throws Exception {

            /**
             * Alle Adressen in neue Struktur einfügen
             */
            for (TreeEntry entry : jXTreeTableRoute.getEntryList()) {
                if (entry instanceof TreeAddress) {
                    TreeAddress address = (TreeAddress) entry;
                    TreeAddressContainer container = new TreeAddressContainer(address);
                    allAddressKnots.add(container);
                    for (TreeEntry entry2 : jXTreeTableRoute.getEntryList()) {
                        if (entry2 instanceof TreeAddress) {
                            TreeAddress address2 = (TreeAddress) entry2;
                            if (!address.equals(address2)) {
                                TreeRoute route = new TreeRoute(address.getAddress(), address2.getAddress());
                                //route.calcRoute();
                                container.addChildRoute(new TreeRouteContainer(route, container, null));
                            }
                        }
                    }
                }
            }
            for (TreeAddressContainer container1 : allAddressKnots) {
                for (TreeRouteContainer route1 : container1.getChildRouten()) {
                    Container2:
                    for (TreeAddressContainer container2 : allAddressKnots) {
                        for (TreeRouteContainer route2 : container2.getChildRouten()) {
                            if (route1.route.getEndAddress().equals(route2.route.getStartAddress()) && route2.route.getEndAddress().equals(route1.route.getStartAddress())) {
                                route1.ende = container2;
                                break Container2;
                            }
                        }
                    }
                }
            }
            boolean allAreConnected = false;
            allAddressKnots.get(0).isConnected = true;
            while (!allAreConnected) {
                TreeRouteContainer minimalRoute = new TreeRouteContainer(new TreeRoute(new Address(0, 0), new Address(0, 180)), null, null);
                for (TreeAddressContainer container : allAddressKnots) {
                    if (container.isConnected) {
                        for (TreeRouteContainer route : container.getChildRouten()) {
                            if (route.start.isConnected && route.ende.isConnected) {
                            } else {
                                if (route.route.getRoute().getLänge() < minimalRoute.route.getRoute().getLänge()) {
                                    minimalRoute = route;
                                }
                            }

                        }
                    }
                }
                minimalRoute.start.addChild(minimalRoute.ende);
                minimalRoute.ende.isConnected = true;
                minimalTree.add(minimalRoute);
                allAreConnected = true;
                for (TreeAddressContainer container : allAddressKnots) {
                    if (!container.isConnected) {
                        allAreConnected = false;
                    }
                }
            }

            List<TreeRouteContainer> maxRouten = allAddressKnots.get(0).getMaxRouten();
            for (TreeRouteContainer route : maxRouten) {
                //route.route.calcRoute();
                route.route.getLine().setColor(mapPointColor);
                jMapViewer.addMapLines(route.route.getLine());
            }
            for (int i = 0; i < maxRouten.size() - 1; i++) {
                TreeRouteContainer routeAB = maxRouten.get(i);
                TreeRouteContainer routeBC = maxRouten.get(i + 1);
                if (routeAB.ende.anzahlKanten > 2) {
                    TreeRouteContainer routeAC = new TreeRouteContainer(new TreeRoute(routeAB.start.getMe().getAddress(), routeBC.ende.getMe().getAddress()), routeAB.start, routeBC.ende);
                    routeAC.route.calcRoute();
                    if ((routeAB.route.getRoute().getLänge() + routeBC.route.getRoute().getLänge()) > routeAC.route.getRoute().getLänge()) {
                        maxRouten.add(i, routeAC);
                        routeAC.route.getLine().setColor(mapPointColor);
                        jMapViewer.addMapLines(routeAC.route.getLine());

                        routeAB.ende.anzahlKanten -= 2;

                        jMapViewer.deleteMapLines(routeAB.route.getLine());
                        jMapViewer.deleteMapLines(routeBC.route.getLine());
                        maxRouten.remove(routeAB);
                        maxRouten.remove(routeBC);
                        --i;
                    }
                }
            }
            
            for (TreeEntry entry : jXTreeTableRoute.getEntryList())
                if (entry instanceof TreeRoute)
                    jXTreeTableRoute.removeEntry(entry);
            
            for (TreeRouteContainer route : maxRouten) {
                jXTreeTableRoute.removeEntry(route.start.getMe());
                jXTreeTableRoute.addEntry(1, route.start.getMe());
                jXTreeTableRoute.addEntry(1, route.route);
                if (!route.route.getRoute().isCalculated()) {
                    jMapViewer.deleteMapLines(route.route.getLine());
                    route.route.calcRoute();
                    route.route.getLine().setColor(mapPointColor);
                    jMapViewer.addMapLines(route.route.getLine());
                }
            }
            jXTreeTableRoute.removeEntry(maxRouten.get(maxRouten.size() - 1).ende.getMe());
            jXTreeTableRoute.addEntry(1, maxRouten.get(maxRouten.size() - 1).ende.getMe());

            return null;
        }
    };

    SwingWorker<Void, Void> workerTrack = new SwingWorker<Void, Void>() {
        @Override
        protected Void doInBackground() throws Exception {

            List<Address> trackEntrys = new ArrayList<>();
            for (TreeEntry entry : jXTreeTableRoute.getEntryList()) {
                if (entry instanceof TreeAddress) {
                    trackEntrys.add(((TreeAddress) entry).getAddress());
                }
            }

            AddressPermute calcTrack = new AddressPermute(that);
            calcTrack.permuteRoute(trackEntrys, 0);

            trackEntrys = calcTrack.getShortestTrack();
                
            for (TreeEntry entry : jXTreeTableRoute.getEntryList())
                if (entry instanceof TreeRoute)
                    jXTreeTableRoute.removeEntry(entry);
            
            //Eintrag 0 neu anlegen!
            Address entry = trackEntrys.get(0);
            TreeEntry thatTreeEntry = jXTreeTableRoute.getEntryAtAddress(entry);
            jXTreeTableRoute.removeEntry(thatTreeEntry);
            jXTreeTableRoute.addEntry(jXTreeTableRoute.getEntryList().size() -1, thatTreeEntry);
                
            for (int it = 1; it < trackEntrys.size(); it++) {
                Address parentNode = trackEntrys.get(it - 1);
                Address thisNode = trackEntrys.get(it);
                
                
                thatTreeEntry = new TreeRoute(calcTrack.isInSavedRoutes(parentNode, thisNode));
                jXTreeTableRoute.addEntry(jXTreeTableRoute.getEntryList().size() - 1, thatTreeEntry);
                ((TreeRoute) thatTreeEntry).getLine().setColor(mapPointColor);
                jMapViewer.addMapLines(((TreeRoute) thatTreeEntry).getLine());
                
                thatTreeEntry = jXTreeTableRoute.getEntryAtAddress(thisNode);
                jXTreeTableRoute.removeEntry(thatTreeEntry);
                jXTreeTableRoute.addEntry(jXTreeTableRoute.getEntryList().size() - 1, thatTreeEntry);
                
            }
            return null;
        }
    };
    SwingWorker<Void, Void> workerAddTestAddresses = new SwingWorker<Void, Void>() {
        @Override
        protected Void doInBackground() throws Exception {

            String[][] favoriten = {{"LC-Service", "Schloss-Schönau-Straße 6, 52072 Aachen"},
                                                {"Media Markt Aachen", "Franzstraße 6, 52064 Aachen"},
            //                                    {"Media Markt Herzogenrath", "Voccartstraße 66, 52134 Herzogenrath"},
                                                {"Media Markt Eschweiler", "Auerbachstraße 30, 52249 Eschweiler"},
                                                {"Media Markt Hückelhoven", "Am Landabsatz 5, 41836 Hückelhoven"},
                                                {"Media Markt Mönchengladbach", "Breitenbachstraße 50, 41065 Mönchengladbach"},
                                                {"Media Markt Neuss", "Konrad-Adenauer-Ring 95, 41464 Neuss"},
                                                {"A. Bring", "Kastanienweg 9, Aachen"},
            //                                    {"IOB", "Kopernikusstr. 10, Aachen"},
//            {"Gandt", "Alte Dorfstr.110, Jülich"},
//            {"Linnich", "Linnich"},
//            {"Bauhaus", "Gut Dämme Str., Aachen"},
            //                                    {"Schloss-Park-Str.", "Schloss-Park-Str. 11, Aachen"},
            //                                    {"Saturn Aachen", "Adalbertstraße 100,  52062 Aachen"},
                                                {"Saturn Düren", "Kuhgasse 8, 52349 Düren"}};
            jProgressBar1.setMinimum(0);
            jProgressBar1.setMaximum(favoriten.length);

            LookupAddress address;
            TreeAddress entry;
            for (String[] favorit : favoriten) {
                jProgressBar1.setValue(jProgressBar1.getValue() + 1);
                jProgressBar1.repaint();
                address = new LookupAddress(that, true, favorit[1]);
                address.setVisible(true);
                entry = new TreeAddress(that.jXTreeTableRoute, new Uhrzeit(), new Uhrzeit("00:15"), favorit[0], address.getMapAddress(), new Euro());
                entry.setTermin(new Termin(new Uhrzeit("10:00"), new Uhrzeit("15:00")));
                jXTreeTableRoute.addEntry(jXTreeTableRoute.getEntryList().size() - 1, entry);
                entry.getDot().setColor(mapPointColor);
                jMapViewer.addMapMarker(entry.getDot());

            }
            jProgressBar1.setVisible(false);
            jLabel1.setText(" ");

            return null;
        }
    };

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TSP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TSP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TSP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TSP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TSP().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private org.openstreetmap.gui.jmapviewer.JMapViewer jMapViewer;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuDatei;
    private javax.swing.JMenuItem jMenuItemAddEntry;
    private javax.swing.JMenuItem jMenuItemBeenden;
    private javax.swing.JMenuItem jMenuItemRemoveEntry;
    private javax.swing.JPanel jPanelStatus;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton jToolBarItemAddEntry;
    private javax.swing.JButton jToolBarItemAllInOne;
    private javax.swing.JButton jToolBarItemGetAllRoutes;
    private javax.swing.JButton jToolBarItemMaxRoute;
    private javax.swing.JButton jToolBarItemMinimalTree;
    private javax.swing.JButton jToolBarItemRemoveEntry;
    private javax.swing.JButton jToolBarItemResetMap;
    private javax.swing.JButton jToolBarItemTrack;
    private javax.swing.JToolBar.Separator jToolBarSeparator1;
    private javax.swing.JToolBar.Separator jToolBarSeparator2;
    private javax.swing.JToolBar.Separator jToolBarSeparator3;
    private de.bring.treeTableRoute.gui.JXTreeTableRouteShort jXTreeTableRoute;
    // End of variables declaration//GEN-END:variables
}
